import {
  createRawSnippet
} from "./chunk-43ZZ6QYS.js";
import "./chunk-XMB5OQMS.js";
import {
  hydrate,
  mount,
  unmount
} from "./chunk-SNHJQEBJ.js";
import "./chunk-7J6EK5EQ.js";
import "./chunk-L2DZY7GF.js";
import {
  component_context,
  flush_sync,
  getAllContexts,
  getContext,
  hasContext,
  lifecycle_legacy_only,
  setContext,
  tick,
  untrack,
  user_effect
} from "./chunk-EJDP6NYJ.js";
import {
  lifecycle_outside_component
} from "./chunk-JMCBJ2FF.js";
import "./chunk-KZKLNVTC.js";
import "./chunk-SPAZIJ42.js";
import {
  is_array
} from "./chunk-XCEQXHQA.js";
import "./chunk-AEM4PSQ4.js";
import "./chunk-6WDZWUHI.js";

// node_modules/svelte/src/index-client.js
function onMount(fn) {
  if (component_context === null) {
    lifecycle_outside_component("onMount");
  }
  if (component_context.l !== null) {
    init_update_callbacks(component_context).m.push(fn);
  } else {
    user_effect(() => {
      const cleanup = untrack(fn);
      if (typeof cleanup === "function")
        return (
          /** @type {() => void} */
          cleanup
        );
    });
  }
}
function onDestroy(fn) {
  if (component_context === null) {
    lifecycle_outside_component("onDestroy");
  }
  onMount(() => () => untrack(fn));
}
function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function createEventDispatcher() {
  const active_component_context = component_context;
  if (active_component_context === null) {
    lifecycle_outside_component("createEventDispatcher");
  }
  return (type, detail, options) => {
    var _a;
    const events = (
      /** @type {Record<string, Function | Function[]>} */
      (_a = active_component_context.s.$$events) == null ? void 0 : _a[
        /** @type {any} */
        type
      ]
    );
    if (events) {
      const callbacks = is_array(events) ? events.slice() : [events];
      const event = create_custom_event(
        /** @type {string} */
        type,
        detail,
        options
      );
      for (const fn of callbacks) {
        fn.call(active_component_context.x, event);
      }
      return !event.defaultPrevented;
    }
    return true;
  };
}
function beforeUpdate(fn) {
  if (component_context === null) {
    lifecycle_outside_component("beforeUpdate");
  }
  if (component_context.l === null) {
    lifecycle_legacy_only("beforeUpdate");
  }
  init_update_callbacks(component_context).b.push(fn);
}
function afterUpdate(fn) {
  if (component_context === null) {
    lifecycle_outside_component("afterUpdate");
  }
  if (component_context.l === null) {
    lifecycle_legacy_only("afterUpdate");
  }
  init_update_callbacks(component_context).a.push(fn);
}
function init_update_callbacks(context) {
  var l = (
    /** @type {ComponentContextLegacy} */
    context.l
  );
  return l.u ?? (l.u = { a: [], b: [], m: [] });
}
function flushSync(fn) {
  flush_sync(fn);
}
export {
  afterUpdate,
  beforeUpdate,
  createEventDispatcher,
  createRawSnippet,
  flushSync,
  getAllContexts,
  getContext,
  hasContext,
  hydrate,
  mount,
  onDestroy,
  onMount,
  setContext,
  tick,
  unmount,
  untrack
};
//# sourceMappingURL=svelte.js.map
